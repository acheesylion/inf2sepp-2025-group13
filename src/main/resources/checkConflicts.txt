/**
     * Checks if there is a conflict between the specified time interval and any existing time slots.
     *
     * <p>
     * The method iterates over all {@code TimeSlot} objects stored in {@code timeSlots} and compares their
     * intervals with the provided start and end dates/times. If an overlapping interval is found,
     * it returns an array containing the course code and activity ID of the conflicting time slot.
     * Otherwise, an empty array is returned.
     * </p>
     *
     * @param startDate the start date of the time interval to check
     * @param startTime the start time of the time interval to check
     * @param endDate   the end date of the time interval to check
     * @param endTime   the end time of the time interval to check
     * @return an array of two strings: the first element is the course code and the second element is the activity ID
     *         of the conflicting time slot, or an empty array if no conflict is found.
     */
    public String[] checkConflicts(LocalDate startDate, LocalTime startTime,
                                   LocalDate endDate, LocalTime endTime) {
        LocalDateTime inputStart = LocalDateTime.of(startDate, startTime);
        LocalDateTime inputEnd = LocalDateTime.of(endDate, endTime);

        for (TimeSlot ts : timeSlots) {
            LocalDateTime slotStart = LocalDateTime.of(ts.getStartDate(), ts.getStartTime());
            LocalDateTime slotEnd = LocalDateTime.of(ts.getEndDate(), ts.getEndTime());

            if (inputStart.isBefore(slotEnd) || slotStart.isBefore(inputEnd)) {
                String conflictCourseCode = ts.getCourseCode();
                String conflictID = Integer.toString(ts.getActivityId());
                return (new String[] {conflictCourseCode, conflictID});
            }
        }

        // Return an empty array if no conflicts are found.
        return (new String[0]);
    }